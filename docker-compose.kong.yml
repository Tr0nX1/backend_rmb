version: '3.8'

services:
  kong-database:
    image: postgres:13
    environment:
      POSTGRES_USER: kong
      POSTGRES_DB: kong
      POSTGRES_PASSWORD: kong_password_2024
    volumes:
      - kong_data:/var/lib/postgresql/data
    networks:
      - kong-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U kong"]
      interval: 30s
      timeout: 10s
      retries: 3

  kong-migrations:
    image: kong:3.4
    command: kong migrations bootstrap
    depends_on:
      kong-database:
        condition: service_healthy
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong_password_2024
      KONG_PG_DATABASE: kong
    networks:
      - kong-net
    restart: on-failure

  kong:
    image: kong:3.4
    depends_on:
      - kong-database
      - kong-migrations
      - django-backend
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong_password_2024
      KONG_PG_DATABASE: kong
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      KONG_DECLARATIVE_CONFIG: /kong/declarative/kong.yml
      KONG_PLUGINS: bundled,cors,rate-limiting,request-size-limiting,response-transformer,key-auth,ip-restriction,basic-auth,prometheus,file-log,request-id,correlation-id
    volumes:
      - ./kong.yml:/kong/declarative/kong.yml:ro
      - kong_logs:/tmp
    ports:
      - "8000:8000"   # Kong Proxy HTTP
      - "8443:8443"   # Kong Proxy HTTPS
      - "8001:8001"   # Kong Admin API HTTP
      - "8444:8444"   # Kong Admin API HTTPS
    networks:
      - kong-net
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  django-backend:
    build: 
      context: .
      dockerfile: Dockerfile
    environment:
      - DEBUG=False
      - ALLOWED_HOSTS=django-backend,localhost,127.0.0.1,kong
      - DATABASE_URL=postgresql://rmb_user:rmb_password@postgres:5432/repairmybike
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - CORS_ALLOWED_ORIGINS=http://localhost:8000,https://your-domain.com
    volumes:
      - ./logs:/app/logs
      - ./media:/app/media
      - ./staticfiles:/app/staticfiles
    networks:
      - kong-net
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "manage.py", "check", "--deploy"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  postgres:
    image: postgres:13
    environment:
      POSTGRES_DB: repairmybike
      POSTGRES_USER: rmb_user
      POSTGRES_PASSWORD: rmb_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db_init:/docker-entrypoint-initdb.d
    networks:
      - kong-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U rmb_user -d repairmybike"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - kong-net
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - kong-net
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - kong-net
    restart: unless-stopped

volumes:
  kong_data:
  kong_logs:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  kong-net:
    driver: bridge