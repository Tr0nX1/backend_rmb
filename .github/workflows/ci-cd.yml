name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # ==============================================================================
  # TESTING & LINTING JOB
  # ==============================================================================
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_repairmybike_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install coverage pytest-django pytest-cov flake8 black isort

    - name: Create logs directory
      run: mkdir -p logs

    - name: Set up environment variables
      run: |
        echo "SECRET_KEY=test-secret-key-for-ci-cd-pipeline-only" >> $GITHUB_ENV
        echo "DEBUG=True" >> $GITHUB_ENV
        echo "ENVIRONMENT=testing" >> $GITHUB_ENV
        echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/test_repairmybike_db" >> $GITHUB_ENV
        echo "REDIS_URL=redis://localhost:6379/0" >> $GITHUB_ENV
        echo "ALLOWED_HOSTS=localhost,127.0.0.1" >> $GITHUB_ENV
        echo "CORS_ALLOWED_ORIGINS=http://localhost:3000" >> $GITHUB_ENV
        echo "DESCOPE_PROJECT_ID=test-project-id" >> $GITHUB_ENV
        echo "DESCOPE_MANAGEMENT_KEY=test-management-key" >> $GITHUB_ENV
        echo "STAFF_API_KEY=test-staff-api-key" >> $GITHUB_ENV
        echo "RAZORPAY_ENABLED=False" >> $GITHUB_ENV

    - name: Run code formatting check (Black)
      run: black --check --diff .

    - name: Run import sorting check (isort)
      run: isort --check-only --diff .

    - name: Run linting (flake8)
      run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

    - name: Run Django system checks
      run: python manage.py check --deploy

    - name: Run migrations
      run: python manage.py migrate

    - name: Collect static files
      run: python manage.py collectstatic --noinput

    - name: Run tests with coverage
      run: |
        coverage run --source='.' manage.py test
        coverage report --show-missing
        coverage xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  # ==============================================================================
  # SECURITY SCANNING JOB
  # ==============================================================================
  security:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit semgrep

    - name: Run safety check (dependency vulnerabilities)
      run: safety check --json

    - name: Run bandit security linter
      run: bandit -r . -f json -o bandit-report.json || true

    - name: Run semgrep security analysis
      run: |
        python -m semgrep --config=auto --json --output=semgrep-report.json . || true

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          semgrep-report.json

  # ==============================================================================
  # BUILD & DEPLOY JOB (Production)
  # ==============================================================================
  deploy:
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Create logs directory
      run: mkdir -p logs

    - name: Set up production environment variables
      run: |
        echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> $GITHUB_ENV
        echo "DEBUG=False" >> $GITHUB_ENV
        echo "ENVIRONMENT=production" >> $GITHUB_ENV
        echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> $GITHUB_ENV
        echo "REDIS_URL=${{ secrets.REDIS_URL }}" >> $GITHUB_ENV
        echo "ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }}" >> $GITHUB_ENV
        echo "CORS_ALLOWED_ORIGINS=${{ secrets.CORS_ALLOWED_ORIGINS }}" >> $GITHUB_ENV
        echo "DESCOPE_PROJECT_ID=${{ secrets.DESCOPE_PROJECT_ID }}" >> $GITHUB_ENV
        echo "DESCOPE_MANAGEMENT_KEY=${{ secrets.DESCOPE_MANAGEMENT_KEY }}" >> $GITHUB_ENV
        echo "STAFF_API_KEY=${{ secrets.STAFF_API_KEY }}" >> $GITHUB_ENV
        echo "RAZORPAY_KEY_ID=${{ secrets.RAZORPAY_KEY_ID }}" >> $GITHUB_ENV
        echo "RAZORPAY_KEY_SECRET=${{ secrets.RAZORPAY_KEY_SECRET }}" >> $GITHUB_ENV
        echo "RAZORPAY_ENABLED=${{ secrets.RAZORPAY_ENABLED }}" >> $GITHUB_ENV

    - name: Run Django system checks for production
      run: python manage.py check --deploy

    - name: Collect static files
      run: python manage.py collectstatic --noinput

    - name: Deploy to Railway
      uses: railwayapp/railway-deploy@v1.0.0
      with:
        railway_token: ${{ secrets.RAILWAY_TOKEN }}
        service: ${{ secrets.RAILWAY_SERVICE_ID }}

    - name: Run post-deployment health check
      run: |
        sleep 30  # Wait for deployment to complete
        curl -f ${{ secrets.HEALTH_CHECK_URL }}/health/ || exit 1
        curl -f ${{ secrets.HEALTH_CHECK_URL }}/ready/ || exit 1

  # ==============================================================================
  # NOTIFICATION JOB
  # ==============================================================================
  notify:
    runs-on: ubuntu-latest
    needs: [test, security, deploy]
    if: always()
    
    steps:
    - name: Notify deployment status
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
      if: env.SLACK_WEBHOOK_URL != ''