name: Security Monitoring

on:
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

jobs:
  # ==============================================================================
  # DEPENDENCY VULNERABILITY SCANNING
  # ==============================================================================
  dependency-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install safety pip-audit

    - name: Run safety check
      run: |
        safety check --json --output safety-report.json || true
        safety check || echo "Safety check found vulnerabilities"

    - name: Run pip-audit
      run: |
        pip-audit --format=json --output=pip-audit-report.json || true
        pip-audit || echo "Pip-audit found vulnerabilities"

    - name: Upload vulnerability reports
      uses: actions/upload-artifact@v3
      with:
        name: vulnerability-reports
        path: |
          safety-report.json
          pip-audit-report.json

    - name: Create issue for vulnerabilities
      if: failure()
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: 'Security Vulnerabilities Detected',
            body: 'Automated security scan detected vulnerabilities in dependencies. Please check the workflow logs and uploaded artifacts for details.',
            labels: ['security', 'dependencies', 'high-priority']
          })

  # ==============================================================================
  # CODE SECURITY ANALYSIS
  # ==============================================================================
  code-security:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit semgrep

    - name: Run Bandit security analysis
      run: |
        bandit -r . -f json -o bandit-security-report.json || true
        bandit -r . || echo "Bandit found security issues"

    - name: Run Semgrep security analysis
      run: |
        python -m semgrep --config=auto --json --output=semgrep-security-report.json . || true

    - name: Upload security analysis reports
      uses: actions/upload-artifact@v3
      with:
        name: code-security-reports
        path: |
          bandit-security-report.json
          semgrep-security-report.json

  # ==============================================================================
  # DOCKER IMAGE SECURITY SCANNING
  # ==============================================================================
  docker-security:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Build Docker image
      run: |
        docker build -t repairmybike-security-scan .

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'repairmybike-security-scan'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  # ==============================================================================
  # DEPENDENCY UPDATE CHECK
  # ==============================================================================
  dependency-update:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install pip-tools
      run: |
        python -m pip install --upgrade pip
        pip install pip-tools

    - name: Check for outdated packages
      run: |
        pip list --outdated --format=json > outdated-packages.json || true
        pip list --outdated || echo "No outdated packages found"

    - name: Generate updated requirements
      run: |
        pip-compile --upgrade requirements.in || echo "No requirements.in found"

    - name: Upload outdated packages report
      uses: actions/upload-artifact@v3
      with:
        name: dependency-updates
        path: |
          outdated-packages.json

    - name: Create PR for dependency updates
      if: success()
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: 'chore: update dependencies'
        title: 'Automated Dependency Updates'
        body: |
          This PR contains automated dependency updates.
          
          Please review the changes carefully before merging.
          
          - Check for breaking changes in updated packages
          - Run tests to ensure compatibility
          - Review security implications of updates
        branch: automated-dependency-updates
        delete-branch: true