name: Deploy to Railway

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.11'

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install --timeout=300 --retries=3 -r requirements.txt
        
    - name: Set up test environment variables
      run: |
        echo "SECRET_KEY=test-secret-key-for-github-actions-minimum-50-characters-long-secure" >> $GITHUB_ENV
        echo "DEBUG=True" >> $GITHUB_ENV
        echo "DB_NAME=test_db" >> $GITHUB_ENV
        echo "DB_USER=postgres" >> $GITHUB_ENV
        echo "DB_PASSWORD=postgres" >> $GITHUB_ENV
        echo "DB_HOST=localhost" >> $GITHUB_ENV
        echo "DB_PORT=5432" >> $GITHUB_ENV
        echo "DESCOPE_PROJECT_ID=test-project-id" >> $GITHUB_ENV
        echo "DESCOPE_MANAGEMENT_KEY=test-management-key" >> $GITHUB_ENV
        echo "RAZORPAY_KEY_ID=" >> $GITHUB_ENV
        echo "RAZORPAY_KEY_SECRET=" >> $GITHUB_ENV
        echo "RAZORPAY_ENABLED=False" >> $GITHUB_ENV
        echo "STAFF_API_KEY=test-staff-api-key" >> $GITHUB_ENV
        echo "ALLOWED_HOSTS=localhost,127.0.0.1" >> $GITHUB_ENV
        echo "CORS_ALLOWED_ORIGINS=http://localhost:3000,http://127.0.0.1:3000" >> $GITHUB_ENV
        
    - name: Run Django system checks
      run: |
        python manage.py check --deploy
        
    - name: Run migrations
      run: |
        python manage.py makemigrations --check --dry-run
        python manage.py migrate
        
    - name: Run tests
      run: |
        python manage.py test --verbosity=2
        
    - name: Collect static files
      run: |
        mkdir -p staticfiles
        python manage.py collectstatic --noinput

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Railway CLI
      run: |
        curl -fsSL https://railway.com/install.sh | sh
        echo "$HOME/.railway/bin" >> $GITHUB_PATH
        
    - name: Verify Railway CLI Installation
      run: |
        railway --version
        
    - name: Deploy to Railway
      env:
        RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
      run: |
        railway login --token $RAILWAY_TOKEN
        railway link ${{ secrets.RAILWAY_PROJECT_ID }}
        
        # Set environment variables for production
        railway variables set DEBUG=False
        railway variables set DJANGO_SETTINGS_MODULE=repairmybike.settings
        railway variables set PYTHONPATH=/app
        
        # Deploy using Docker
        railway up --detach
        
    - name: Wait for deployment
      run: |
        echo "Waiting for deployment to complete..."
        sleep 60
        
    - name: Verify deployment
      env:
        RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
      run: |
        railway login --token $RAILWAY_TOKEN
        railway link ${{ secrets.RAILWAY_PROJECT_ID }}
        
        # Get the deployment URL
        RAILWAY_URL=$(railway status --json | jq -r '.deployments[0].url // empty')
        
        if [ -n "$RAILWAY_URL" ]; then
          echo "Deployment URL: $RAILWAY_URL"
          
          # Test health endpoint
          for i in {1..10}; do
            if curl -f "$RAILWAY_URL/health/" > /dev/null 2>&1; then
              echo "✅ Health check passed!"
              break
            else
              echo "⏳ Waiting for application to start... (attempt $i/10)"
              sleep 30
            fi
            
            if [ $i -eq 10 ]; then
              echo "❌ Health check failed after 10 attempts"
              exit 1
            fi
          done
        else
          echo "❌ Could not get deployment URL"
          exit 1
        fi

  notify:
    needs: [test, deploy]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Deployment Status
      run: |
        echo "Test result: ${{ needs.test.result }}"
        echo "Deploy result: ${{ needs.deploy.result }}"
        
        if [ "${{ needs.test.result }}" == "success" ]; then
          if [ "${{ needs.deploy.result }}" == "success" ]; then
            echo "✅ Deployment successful!"
          elif [ "${{ needs.deploy.result }}" == "skipped" ]; then
            echo "✅ Tests passed! Deployment skipped (not on main branch or not a push event)"
          else
            echo "❌ Deployment failed!"
            exit 1
          fi
        else
          echo "❌ Tests failed!"
          exit 1
        fi