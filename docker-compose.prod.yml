version: '3.8'

services:
  # ==============================================================================
  # WEB APPLICATION SERVICE (Django - Production)
  # ==============================================================================
  web:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: repairmybike_web_prod
    environment:
      - DEBUG=False
      - ENVIRONMENT=production
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - SECRET_KEY=${SECRET_KEY}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS}
      - DESCOPE_PROJECT_ID=${DESCOPE_PROJECT_ID}
      - DESCOPE_MANAGEMENT_KEY=${DESCOPE_MANAGEMENT_KEY}
      - STAFF_API_KEY=${STAFF_API_KEY}
      - RAZORPAY_KEY_ID=${RAZORPAY_KEY_ID}
      - RAZORPAY_KEY_SECRET=${RAZORPAY_KEY_SECRET}
      - RAZORPAY_ENABLED=${RAZORPAY_ENABLED}
      - SECURE_SSL_REDIRECT=True
      - SESSION_COOKIE_SECURE=True
      - CSRF_COOKIE_SECURE=True
      - WHITENOISE_USE_FINDERS=False
      - WHITENOISE_AUTOREFRESH=False
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/media
      - logs_volume:/app/logs
    ports:
      - "8000:8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - repairmybike_network

  # ==============================================================================
  # NGINX REVERSE PROXY (Production)
  # ==============================================================================
  nginx:
    image: nginx:alpine
    container_name: repairmybike_nginx_prod
    volumes:
      - ./docker/nginx/nginx.prod.conf:/etc/nginx/nginx.conf
      - static_volume:/app/staticfiles
      - media_volume:/app/media
      - ./docker/nginx/ssl:/etc/nginx/ssl
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - web
    restart: unless-stopped
    networks:
      - repairmybike_network

  # ==============================================================================
  # LOG AGGREGATION (Optional)
  # ==============================================================================
  logrotate:
    image: alpine:latest
    container_name: repairmybike_logrotate
    volumes:
      - logs_volume:/app/logs
      - ./docker/logrotate/logrotate.conf:/etc/logrotate.conf
    command: |
      sh -c "
        while true; do
          logrotate -f /etc/logrotate.conf
          sleep 86400
        done
      "
    restart: unless-stopped
    networks:
      - repairmybike_network

# ==============================================================================
# VOLUMES
# ==============================================================================
volumes:
  static_volume:
    driver: local
  media_volume:
    driver: local
  logs_volume:
    driver: local

# ==============================================================================
# NETWORKS
# ==============================================================================
networks:
  repairmybike_network:
    driver: bridge