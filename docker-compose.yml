version: '3.8'

services:
  # ==============================================================================
  # DATABASE SERVICE (PostgreSQL)
  # ==============================================================================
  db:
    image: postgres:15-alpine
    container_name: repairmybike_db
    environment:
      POSTGRES_DB: repairmybike_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - repairmybike_network

  # ==============================================================================
  # CACHE SERVICE (Redis)
  # ==============================================================================
  redis:
    image: redis:7-alpine
    container_name: repairmybike_redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - repairmybike_network

  # ==============================================================================
  # WEB APPLICATION SERVICE (Django)
  # ==============================================================================
  web:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: repairmybike_web
    environment:
      - DEBUG=True
      - ENVIRONMENT=development
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/repairmybike_db
      - REDIS_URL=redis://redis:6379/1
      - ALLOWED_HOSTS=localhost,127.0.0.1,0.0.0.0,web
      - CORS_ALLOWED_ORIGINS=http://localhost:3000,http://127.0.0.1:3000
    volumes:
      - .:/app
      - static_volume:/app/staticfiles
      - media_volume:/app/media
      - logs_volume:/app/logs
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - repairmybike_network

  # ==============================================================================
  # NGINX REVERSE PROXY (Optional for production-like setup)
  # ==============================================================================
  nginx:
    image: nginx:alpine
    container_name: repairmybike_nginx
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    ports:
      - "80:80"
    depends_on:
      - web
    networks:
      - repairmybike_network

  # ==============================================================================
  # MONITORING SERVICE (Optional)
  # ==============================================================================
  adminer:
    image: adminer:latest
    container_name: repairmybike_adminer
    environment:
      ADMINER_DEFAULT_SERVER: db
    ports:
      - "8080:8080"
    depends_on:
      - db
    networks:
      - repairmybike_network

# ==============================================================================
# VOLUMES
# ==============================================================================
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  static_volume:
    driver: local
  media_volume:
    driver: local
  logs_volume:
    driver: local

# ==============================================================================
# NETWORKS
# ==============================================================================
networks:
  repairmybike_network:
    driver: bridge